import logging
import telebot
from my_envs import MyEnvs
import handlers
import queue_processor
import time
import threading
import schedule
from random import randrange


# region –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

log_format = ("[%(asctime)s] %(levelname)s "
              "[%(filename)s.%(funcName)s] %(message)s")
logging.basicConfig(format=log_format, level=logging.INFO)

# endregion

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
envs = MyEnvs()

_number_of_messages = 0
""" –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å """

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(envs.BOT_TOKEN, parse_mode='HTML')
envs.BOT = bot

# region —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


def ready_check():
    assert envs
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    assert envs.BOT
    bot_info = envs.BOT.get_me()
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç: %s", bot_info)

# endregion

# region —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏


def background_ticks():
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (schedule)
    –∏ –ø—Ä–æ—á–∏–µ –º–µ–ª–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è """

    while True:
        queue_processor.update_pinned_message(envs)  # —Å—Ç–∞—Ç—É—Å
        schedule.run_pending()  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        time.sleep(3)


def endless_sending():
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ """

    while True:
        global _number_of_messages

        if _number_of_messages == 0:
            time.sleep(60)  # –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
            continue

        resp = handlers.send_queue_to_channel(envs, count=1)
        _number_of_messages -= 1
        wait_seconds = randrange(20*60, 30*60)
        logging.info(f"–û—Ç–≤–µ—Ç: '{resp}', –∂–¥—ë–º: {wait_seconds // 60} –º–∏–Ω, "
                     f"{wait_seconds % 60} —Å–µ–∫.")
        time.sleep(wait_seconds)


def add_messages():
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `_number_of_messages` """

    global _number_of_messages
    _number_of_messages = 5

# endregion


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(cbq: telebot.types.CallbackQuery):
    method, *args = cbq.data.split()
    if method == 'queue_send' and args[0].isnumeric():
        result = handlers.send_queue_to_channel(envs, count=int(args[0]))
        bot.answer_callback_query(cbq.id, text=result)


@bot.message_handler(content_types=['text', 'photo'])
def get_text_messages(message: telebot.types.Message):
    if message.from_user.id != envs.ADMIN_USER_ID:
        return  # –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π

    response = None
    try:
        response = handlers.process_message(message, envs)

    except Exception as ex:
        response = f"–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòî\n{ex}"
    finally:
        if response:
            bot.reply_to(message=message, text=response)


ready_check()

schedule.every().day.at("12:00", "Europe/Moscow").do(add_messages)
threading.Thread(target=background_ticks, daemon=True).start()
threading.Thread(target=endless_sending, daemon=True).start()

bot.infinity_polling(
    timeout=10,
    long_polling_timeout=5,
    logger_level=logging.WARNING,
    restart_on_change=True,
    path_to_watch=__file__
)
