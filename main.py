import logging
import threading
import time
from random import randrange

import schedule
import telebot

import handlers
import queue_processor
from my_envs import MyEnvs
from settings import Names, Settings

# region –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_format = ("[%(asctime)s] %(levelname)s "
              "[%(filename)s.%(funcName)s] %(message)s")
logging.basicConfig(format=log_format, level=logging.INFO)


# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
envs = MyEnvs()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
envs.SETTINGS = Settings(envs.SETTINGS_FILE)
envs.READ_TIMEOUT = envs.SETTINGS.get(Names.SETTING_READ_TIMEOUT) or 30

# –±–æ—Ç
telebot.apihelper.CONNECT_TIMEOUT = envs.READ_TIMEOUT
telebot.apihelper.READ_TIMEOUT = envs.READ_TIMEOUT
bot = telebot.TeleBot(
    envs.BOT_TOKEN,
    parse_mode='HTML',
)
envs.BOT = bot

# endregion

# region —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


def ready_check():
    assert envs
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    assert envs.BOT
    bot_info = envs.BOT.get_me()
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç: %s", bot_info)

# endregion

# region —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏


def background_ticks():
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (schedule)
    –∏ –ø—Ä–æ—á–∏–µ –º–µ–ª–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è """

    while True:
        try:
            queue_processor.update_pinned_message(envs)  # —Å—Ç–∞—Ç—É—Å
            schedule.run_pending()  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            time.sleep(3)
        except Exception as ex:
            if "timeout" in str(ex):
                logging.error(
                    "–ü–æ–π–º–∞–ª–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ç–∞–π–º–∞—É—Ç, —Ç–∏–ø–∞ %s, –Ω–æ —Ç—É—Ç –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ",
                    type(ex),
                    exc_info=True,
                )
            pass


def endless_sending():
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ """

    while True:
        messages_to_send = envs.SETTINGS.get(Names.STATE_MESSAGES_TO_SEND)

        if not messages_to_send:
            time.sleep(60)  # –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
            continue

        resp = handlers.send_queue_to_channel(envs, count=1)
        if "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" in resp:
            envs.SETTINGS.set(Names.STATE_MESSAGES_TO_SEND, messages_to_send - 1)
            wait_seconds = randrange(20 * 60, 30 * 60)
            logging.info(
                f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ—Ç–≤–µ—Ç: '{resp}', "
                f"–∂–¥—ë–º: {wait_seconds // 60} –º–∏–Ω, "
                f"{wait_seconds % 60} —Å–µ–∫."
            )
            time.sleep(wait_seconds)
        else:
            logging.info("–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç, –Ω–æ: %s", resp)
            time.sleep(60)


def add_messages():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö `Settings.STATE_MESSAGES_TO_SEND`"""

    add_amount = envs.SETTINGS.get(Names.SETTIGS_MESSAGES_PER_DAY) or 0
    # –ø–æ –∏–¥–µ–µ —Ç—É—Ç –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –≤ _default_settings.json
    logging.info(
        "–ó–∞–ø—É—â–µ–Ω –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å: %s", add_amount
    )

    if (p := envs.SETTINGS.get(Names.STATE_MESSAGES_TO_SEND)) and isinstance(p, int):
        add_amount += p

    envs.SETTINGS.set(Names.STATE_MESSAGES_TO_SEND, add_amount)
    logging.info("–¢–µ–ø–µ—Ä—å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: %s", add_amount)


def no_luck_today():
    """–û—á–∏—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö `Settings.STATE_MESSAGES_TO_SEND`

    (—á—Ç–æ –±—ã –Ω–µ –∫–æ–ø–∏–ª–∏—Å—å)"""

    logging.info(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥–∞ '%s' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '0'.", Names.STATE_MESSAGES_TO_SEND
    )
    envs.SETTINGS.set(Names.STATE_MESSAGES_TO_SEND, 0)


# endregion


@bot.callback_query_handler(func=lambda *_: True)
def callback_handler(cbq: telebot.types.CallbackQuery):
    method, *args = cbq.data.split()
    if method == 'queue_send' and args[0].isnumeric():
        result = handlers.send_queue_to_channel(envs, count=int(args[0]))
        bot.answer_callback_query(cbq.id, text=result)


@bot.message_handler(content_types=['text', 'photo'])
def get_text_messages(message: telebot.types.Message):
    if message.from_user.id != envs.ADMIN_USER_ID:
        return  # –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π

    response = None
    try:
        response = handlers.process_message(message, envs)

    except Exception as ex:
        response = f"–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòî\n{ex}"
    finally:
        if response:
            bot.reply_to(message=message, text=response)


ready_check()

schedule.every().day.at("12:00", "Europe/Moscow").do(add_messages)
schedule.every().day.at("23:50", "Europe/Moscow").do(no_luck_today)
threading.Thread(target=background_ticks, daemon=True).start()
threading.Thread(target=endless_sending, daemon=True).start()

bot.infinity_polling(
    timeout=10,
    long_polling_timeout=120,
    interval=3,  # –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ polling
    logger_level=logging.WARNING,
    restart_on_change=True,
    path_to_watch=__file__,
)
