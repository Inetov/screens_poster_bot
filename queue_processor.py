import logging
from pathlib import Path

from telebot.apihelper import ApiTelegramException
from telebot.util import quick_markup

import bot_actions
import image_processing as imp
from my_envs import MyEnvs


def process_one_image(image_path: str | Path, envs: MyEnvs):
    if isinstance(image_path, str):
        image_path = Path(image_path)

    if envs.CROP_DEBUG:
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ TEMP_DIR
        debug_path = Path(envs.TEMP_DIR, image_path.name)
        imp.create_debug_image(image_path.as_posix(), debug_path.as_posix())

    queue_path = Path(envs.QUEUE_DIR, image_path.name)
    imp.create_cropped_image(image_path.as_posix(), queue_path.as_posix())
    image_path.unlink()
    return queue_path.as_posix()


def update_pinned_message(envs: MyEnvs):
    bot = envs.BOT

    message_id = envs.STATE.state_status_message_id
    if not message_id:
        return  # –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–∞, –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ - –Ω–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å

    cnt = bot_actions.get_queue_count(envs)
    new_status_msg = envs.STATUS_MESSAGE.format(cnt=cnt)
    if getattr(envs.STATE, "state_last_status_message_text", None) == new_status_msg:
        return  # —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è

    # –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞: –Ω—É–∂–Ω–æ –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è—Ç—å, –ª–∏–±–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –≥–æ—Ç–æ–≤–∏–º—Å—è:
    markup = quick_markup({
        '‚û°Ô∏èüñºÔ∏è 1!': {'callback_data': 'queue_send 1'}
    }, row_width=1)
    message_args = {
        "message_id": message_id,
        "chat_id": envs.ADMIN_USER_ID,
        "text": new_status_msg,
        "reply_markup": markup,
    }

    if message_id == -1:  # –∑–Ω–∞—á–∏—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        message_args.pop("message_id", None)
        new_msg = bot.send_message(**message_args)
        bot.register_next_step_handler_by_chat_id(
            chat_id=envs.ADMIN_USER_ID,
            callback=bot_actions.delete_next_pin_message,
            envs=envs,
        )
        bot.pin_chat_message(
            chat_id=envs.ADMIN_USER_ID,
            message_id=new_msg.message_id,
            disable_notification=True,
        )

        envs.STATE.state_status_message_id = new_msg.message_id
        return

    # –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫—Ä–µ–ø–µ –∏ –µ—Å—Ç—å —á–µ–º –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å

    # —É–±—Ä–∞–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å bot.get_chat(envs.ADMIN_USER_ID).pinned_message
    # —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–ª–µ pinned_message –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—É—Å—Ç—ã–º, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –∑–∞–∫—Ä–µ–ø –µ—Å—Ç—å
    try:
        bot.edit_message_text(**message_args)
        envs.STATE.state_last_status_message_text = new_status_msg

    except ApiTelegramException as ex:
        if "Bad Request: message is not modified" in ex.description:
            # –µ—Å–ª–∏ –≤ –∑–∞–∫—Ä–µ–ø–µ —É–∂–µ —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª–µ
            envs.STATE.state_last_status_message_text = new_status_msg
            return

        if "Too Many Requests" in ex.description:
            from datetime import timedelta

            # last_part = ex.description.split()[-1]
            # if last_part.isdecimal():
            secs = ex.result_json.get("parameters", {}).get("retry_after")
            if isinstance(secs, int):
                to_wait_str = str(timedelta(seconds=secs))
            else:
                to_wait_str = "–ù–ï–¢ –ó–ù–ê–ß–ï–ù–ò–Ø"

            logging.warning("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –Ω–∞—Å –∑–∞–±–∞–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä! –ñ–¥–∞—Ç—å: %s\n%s", to_wait_str, repr(ex))
            return

        # –Ω–æ —Å—é–¥–∞ –∂–µ, –≤–∏–¥–∏–º–æ, –ø–æ–ø–∞–¥–∞–µ–º –∏ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö, –Ω–∞–¥–æ –±—ã –æ—Ç–ª–∞–¥–∏—Ç—å:
        logging.error(
            "–ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É –∏–∑ –æ–±—ë—Ä—Ç–∫–∏, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–∞:",
            exc_info=ex,
        )

    except Exception as ex:
        logging.error(
            "–ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É —Ç–∏–ø–∞ %s, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–∞:",
            type(ex),
            exc_info=ex,
        )


def file_name_append(file_name, append: str):
    p = Path(file_name)
    return f"{p.stem}{append}{p.suffix}"
